let mapleader=' '
set NERDTree
set which-key
set easymotion
set notimeout
set surround
set exchange
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmode
set number
set relativenumber
set scrolloff=15
set history=100000
set clipboard=unnamed
set visualbell
set noerrorbells

" ------------------- Vim default rebindings -------------------

" Quit visual mode with ESC
vnoremap v <Esc>
 
" Move to the start of line 
nnoremap H ^
vnoremap H ^
 
" Move to the end of line 
nnoremap L $
vnoremap L $
 
" Redo
nnoremap U <C-r>
 
" Yank to the end of line 
nnoremap Y y$
 
" Tab
nnoremap <Tab> >>
nnoremap <S-Tab> <<
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" Clipboard
nnoremap d "_d
vnoremap d "_d
nnoremap D "_D
nnoremap s "_s
nnoremap S "_S
nnoremap c "_c
vnoremap c "_c
nnoremap C "_C
nnoremap x "_x
nnoremap X "_x
xnoremap p pgvy

" Tab navigation
nnoremap tl gt
nnoremap th gT
nnoremap <C-h> gT<CR>
nnoremap <C-l> gt<CR>

" Save file
nnoremap <leader>fs :action SaveDocument<CR>
nnoremap <leader>fS :action SaveAll<CR>

" Reload config
nnoremap <leader>R :source ~/.ideavimrc<CR>

" ------------------- Editor Specific -------------------

" ------------- Built-in undo/redo -------------
nnoremap u :action $Undo<CR>
nnoremap U :action $Redo<CR>


" ------------- Base <leader> commands -------------
let g:WhichKeyDesc_search_everywhere1 = "<leader><leader> Search Everywhere"
nnoremap <leader><leader> :action SearchEverywhere<CR>
vnoremap <leader><leader> :action SearchEverywhere<CR>

let g:WhichKeyDesc_search_character = "<leader>j Search a character"
map <leader>j <Plug>(easymotion-s2)

let g:WhichKeyDesc_search_word = "<leader>J Search a word"
map <leader>J <Plug>(easymotion-sn)

let g:WhichKeyDesc_clear_notifications = "<leader>N Shut up!"
nnoremap <leader>N :action ClearAllNotifications<CR>

let g:WhichKeyDesc_toggle_explorer = "<leader>N Show tree/explorer view"
nnoremap <leader>e :NERDTreeToggle<CR>

" ------------- Buffer -------------
let g:WhichKeyDesc_buffer_opts = "<leader>L +Buffer"

"  let g:WhichKeyDesc_move_buffer_left = "<leader>bh Move Buffer to Left Group" (Intellij doesn't support?)
"  nnoremap <leader>bh :action ??CR>

let g:WhichKeyDesc_move_buffer_bottom = "<leader>bj Move Buffer to Bottom Group"
nnoremap <leader>bj :action MoveTabDown<CR>

"  let g:WhichKeyDesc_move_buffer_up = "<leader>bk Move Buffer to Top Group" (Intellij doesn't support?)
"  nnoremap <leader>bk :action ??CR>

let g:WhichKeyDesc_move_buffer_right = "<leader>bh Move Buffer to Right Group"
nnoremap <leader>bl :action MoveTabRight<CR>

let g:WhichKeyDesc_buffer_new = "<leader>bn New Buffer"
nnoremap <leader>bn :action NewFile<CR>

let g:WhichKeyDesc_buffer_paste = "<leader>by Paste Whole Buffer"
nnoremap <leader>bp ggVGp

let g:WhichKeyDesc_buffer_pin = "<leader>bt Toggle Buffer Pin"
let g:WhichKeyDesc_buffer_pin2 = "<leader>bT Toggle Buffer Pin"
nnoremap <leader>bt :action PinActiveTabToggle<CR>
nnoremap <leader>bT :action PinActiveTabToggle<CR>

let g:WhichKeyDesc_buffer_yank = "<leader>by Yank Whole Buffer"
nnoremap <leader>by ggVGy

" ------------- New Buffer -------------
"  let g:WhichKeyDesc_buffer_new_opts = "<leader>N +New"

"  let g:WhichKeyDesc_buffer_new_left = "<leader>bnh New Buffer Left"
"  nnoremap <leader>bnh :action ??CR>

"  let g:WhichKeyDesc_buffer_new_down = "<leader>bnh New Buffer Down"
"  nnoremap <leader>bnj :action ??CR>

"  let g:WhichKeyDesc_buffer_new_up = "<leader>bnh New Buffer Up"
"  nnoremap <leader>bnk :action ??<CR>

"  let g:WhichKeyDesc_buffer_new_right = "<leader>bnh New Buffer Right"
"  nnoremap <leader>bnl :action ??<CR>

" ------------- Debug -------------
let g:WhichKeyDesc_debug_opts = "<leader>d +Debug"

let g:WhichKeyDesc_debug_run_cursor = "<leader>dC Run to Cursor"
nnoremap <leader>dC :action RunToCursor<CR>

let g:WhichKeyDesc_debug_resume = "<leader>dc Continue"
nnoremap <leader>dc :action Resume<CR>

let g:WhichKeyDesc_debug_step_into = "<leader>dc Step Into"
nnoremap <leader>di :action StepInto<CR>

let g:WhichKeyDesc_debug_jump_to_cursor = "<leader>dc Jump to Cursor"
nnoremap <leader>dj :action ForceRunToCursor<CR>

let g:WhichKeyDesc_debug_hover = "<leader>dh Hover"
nnoremap <leader>dh :action QuickEvaluateExpression<CR>

let g:WhichKeyDesc_debug_step_out = "<leader>dO Step Out"
nnoremap <leader>dO :action StepOut<CR>

let g:WhichKeyDesc_debug_step_out = "<leader>do Step Over"
nnoremap <leader>do :action StepOver<CR>

let g:WhichKeyDesc_debug_pause = "<leader>dp Pause"
nnoremap <leader>dp :action Pause<CR>

let g:WhichKeyDesc_debug_restart = "<leader>dR Restart"
nnoremap <leader>dR :action Debug<CR>

let g:WhichKeyDesc_debug_run = "<leader>dR Run without Debugging"
nnoremap <leader>dr :action Run<CR>

let g:WhichKeyDesc_debug_start = "<leader>dR Start"
nnoremap <leader>ds :action Debug<CR>

let g:WhichKeyDesc_debug_stop = "<leader>dS Stop"
nnoremap <leader>dS :action Stop<CR>

let g:WhichKeyDesc_debug_view_repl = "<leader>dv View Repl"
nnoremap <leader>dv :action EvaluateExpression<CR>

let g:WhichKeyDesc_debug_view_watch = "<leader>dv View Watch"
nnoremap <leader>dw :action ActivateDebugToolWindow<CR>

" ------------- Debug Breakpoints -------------
let g:WhichKeyDesc_debug_breakpoints_opts = "<leader>db +Breakpoints"

let g:WhichKeyDesc_breakpoints_add = "<leader>dbb Add Breakpoint"
nnoremap <leader>dbb :action ToggleLineBreakpoint<CR>

let g:WhichKeyDesc_breakpoints_add_conditional = "<leader>dbc Add Conditional Breakpoint"
nnoremap <leader>dbc :action AddConditionalBreakpoint<CR>

let g:WhichKeyDesc_breakpoints_remove_breakpoint = "<leader>dbd Remove Breakpoint"
nnoremap <leader>dbd :action ToggleLineBreakpoint<CR>

let g:WhichKeyDesc_breakpoints_remove_all_breakpoint = "<leader>dbD Remove All Breakpoints"
nnoremap <leader>dbD :action Debugger.RemoveAllBreakpoints<CR>

let g:WhichKeyDesc_breakpoints_disable_all_breakpoint = "<leader>dbE Disable All Breakpoints"
nnoremap <leader>dbE :action XDebugger.MuteBreakpoints<CR>

let g:WhichKeyDesc_breakpoints_enable_all_breakpoint = "<leader>dbe Enable All Breakpoints"
nnoremap <leader>dbe :action XDebugger.MuteBreakpoints<CR>

let g:WhichKeyDesc_breakpoints_next = "<leader>dbn Next Breakpoint"
nnoremap <leader>dbn :action ViewBreakpoints<CR>

let g:WhichKeyDesc_breakpoints_previous = "<leader>dbp Previous Breakpoint"
nnoremap <leader>dbp :action ViewBreakpoints<CR>

let g:WhichKeyDesc_breakpoints_toggle = "<leader>dbs Enable/Disable (Switch) Breakpoint"
nnoremap <leader>dbp :action ToggleBreakpointEnabled<CR>

" ------------- Files -------------
let g:WhichKeyDesc_files_opts = "<leader>f +Files"

let g:WhichKeyDesc_files_save = "<leader>fs Save"
nnoremap <leader>fs :action SaveDocument<CR>

let g:WhichKeyDesc_files_save_all = "<leader>fS Save All"
nnoremap <leader>fS :action SaveAll<CR>

"  let g:WhichKeyDesc_files_save_all = "<leader>fL Locate in OS"
"  nnoremap <leader>fL :action ??<CR>

let g:WhichKeyDesc_files_view_file_explorer = "<leader>fe View File in Explorer"
nnoremap <leader>fe :NERDTreeFind<CR>

let g:WhichKeyDesc_files_new = "<leader>fn New File"
nnoremap <leader>fn :action NewFile<CR>

" ------------- Git -------------
" Not using this on Intellij
"  let g:WhichKeyDesc_files_opts = "<leader>g +Git"

" ------------- Git Web Link -------------
let g:WhichKeyDesc_git_opts = "<leader>g +Git"
let g:WhichKeyDesc_git_weblinks_opts = "<leader>gw +WebLinks"
let g:WhichKeyDesc_git_weblinks_selection = "<leader>gws Copy Selection"
nnoremap <leader>gws :action com.github.kawamataryo.copygitlink.CopyPermalink<CR>
vnoremap <leader>gws :action com.github.kawamataryo.copygitlink.CopyPermalink<CR>

" ------------- Go -------------
let g:WhichKeyDesc_go_declaration = "gd Declaration"
nnoremap gd :action GotoDeclaration<CR>

let g:WhichKeyDesc_go_implementation = "gi Implementation"
nnoremap gi :action GotoImplementation<CR>

let g:WhichKeyDesc_find_references = "gr Find References"
nnoremap gr :action FindUsages<CR>

let g:WhichKeyDesc_peek_implementation = "gp Peek Implementation"
nnoremap gp :action QuickImplementations<CR>

let g:WhichKeyDesc_next_occurence = "gn Next Occurence"
nnoremap gn :action NextOccurence<CR>
vnoremap gn :action NextOccurence<CR>

let g:WhichKeyDesc_previous_occurence = "gN Previous Occurence"
nnoremap gN :action PreviousOccurence<CR>
vnoremap gN :action PreviousOccurence<CR>

let g:WhichKeyDesc_go_last_edit = "gL Last Edit Location"
nnoremap gL :action JumpToLastChange<CR>

let g:WhichKeyDesc_go_last_edit = "gl Last Buffer"
nnoremap gl <C-6>

" ------------- LSP -------------
let g:WhichKeyDesc_lsp_opts = "<leader>l +LSP"

let g:WhichKeyDesc_lsp_action = "<leader>la Action"
nnoremap <leader>la :action ShowIntentionActions<CR>

let g:WhichKeyDesc_lsp_hover = "<leader>lh Hover"
nnoremap <leader>lh :action QuickJavaDoc<CR>

let g:WhichKeyDesc_lsp_method_hint = "<leader>lm Method Hint"
nnoremap <leader>lm :action ParameterInfo<CR>

let g:WhichKeyDesc_lsp_rename = "<leader>lr Rename"
nnoremap <leader>lr :action RenameElement<CR>

let g:WhichKeyDesc_errors_next_error_all = "<leader>leN Next Error All Files"
nnoremap <leader>lN :action ReSharperGotoNextErrorInSolution<CR>

let g:WhichKeyDesc_errors_next_error = "<leader>len Next Error"
nnoremap <leader>ln :action GotoNextError<CR>

let g:WhichKeyDesc_errors_previous_error_all = "<leader>leP Previous Error All Files"
nnoremap <leader>lP :action ReSharperGotoPreviousErrorInSolution<CR>

let g:WhichKeyDesc_errors_previous_error = "<leader>lep Previous Error"
nnoremap <leader>lp :action GotoPreviousError<CR>

let g:WhichKeyDesc_errors_view = "<leader>lev View Error Pane"
nnoremap <leader>lev :action ActivateProblemsViewToolWindow<CR>

" ------------- Bookmarks -------------
let g:WhichKeyDesc_marks_opts = "<leader>m +Marks"

"  let g:WhichKeyDesc_marks_clear = "<leader>mc Clear"
"  nnoremap <leader>mc :action ??<CR>

let g:WhichKeyDesc_marks_clear_all = "<leader>mC Clear All"
nnoremap <leader>mC :delmarks A-Z0-9<CR>

let g:WhichKeyDesc_marks_find = "<leader>mf Find"
nnoremap <leader>mf :action ShowBookmarks<CR>

let g:WhichKeyDesc_marks_find_all = "<leader>mF Find All Files"
nnoremap <leader>mF :action ShowBookmarks<CR>

let g:WhichKeyDesc_marks_labeled = "<leader>ml Labeled"
nnoremap <leader>ml :action ToggleBookmarkWithMnemonic<CR>

let g:WhichKeyDesc_marks_next = "<leader>mn Next"
nnoremap <leader>mn :action GotoNextBookmark<CR>

let g:WhichKeyDesc_marks_previous = "<leader>mp Previous"
nnoremap <leader>mp :action GotoPreviousBookmark<CR>

let g:WhichKeyDesc_marks_toggle = "<leader>mt Toggle"
nnoremap <leader>mt :action ToggleBookmark<CR>

let g:WhichKeyDesc_marks_view = "<leader>mv View"
nnoremap <leader>mv :action ActivateBookmarksToolWindow<CR>

" ------------- Project -------------
let g:WhichKeyDesc_projects_opts = "<leader>p +Project"

let g:WhichKeyDesc_projects_build = "<leader>pb Build"
nnoremap <leader>pb :action BuildSolutionAction<CR>

" ------------- Tests -------------
" Todo

" ------------- Project Workspace -------------
let g:WhichKeyDesc_projects_workspace_opts = "<leader>pw +Workspace"

"  let g:WhichKeyDesc_projects_workspace_add = "<leader>pwa Add"
"  nnoremap <leader>pwa :action ??<CR>

"  let g:WhichKeyDesc_projects_workspace_change = "<leader>pwc Change"
"  nnoremap <leader>pwc :action ??<CR>

let g:WhichKeyDesc_projects_workspace_quit = "<leader>pwq Quit"
nnoremap <leader>pwq :action CloseProject<CR>

"  let g:WhichKeyDesc_projects_workspace_remove = "<leader>pwr Remove"
"  nnoremap <leader>pwr :action ??<CR>

" ------------- Quit -------------
let g:WhichKeyDesc_quit_opts = "<leader>q +Quit"

let g:WhichKeyDesc_quit_quit = "<leader>qq Quit"
nnoremap <leader>qq :action CloseEditor<CR>

let g:WhichKeyDesc_quit_keep_buffer = "<leader>qk Close All Other Buffers"
nnoremap <leader>qk :action CloseAllEditorsButActive<CR>

let g:WhichKeyDesc_quit_all = "<leader>qQ Quit All"
nnoremap <leader>qQ :action CloseAllEditors<CR>

let g:WhichKeyDesc_quit_undo = "<leader>qu Undo (Reopen closed)"
nnoremap <leader>qu :action ReopenClosedTab<CR>

" ------------- Search -------------
let g:WhichKeyDesc_search_opts = "<leader>s +Search"

let g:WhichKeyDesc_search_file_content = "<leader>sc File Content"
nnoremap <leader>sc :action TextSearchAction<CR>

"  let g:WhichKeyDesc_search_file_content_workspaces = "<leader>sC File Content (Configured Workspaces)"
"  nnoremap <leader>sC :action ??<CR>

let g:WhichKeyDesc_search_file_history = "<leader>sh File History"
nnoremap <leader>sh :action LocalHistory.ShowHistory<CR>

let g:WhichKeyDesc_search_file_name = "<leader>sn File Name"
nnoremap <leader>sf :action GotoFile<CR>

"  let g:WhichKeyDesc_search_file_name_workspaces = "<leader>sN File Name (Configured Workspaces)"
"  nnoremap <leader>sN :action ??<CR>

let g:WhichKeyDesc_search_everything = "<leader>se Everything"
nnoremap <leader>se :action SearchEverywhere<CR>
vnoremap <leader>se :action SearchEverywhere<CR>

let g:WhichKeyDesc_search_file = "<leader>sf File"
nnoremap <leader>sf :action GotoFile<CR>

let g:WhichKeyDesc_search_recent_files = "<leader>sr Recent Files"
nnoremap <leader>sr :action RecentFiles<CR>

let g:WhichKeyDesc_search_symbol = "<leader>ss Symbol"
nnoremap <leader>ss :action GotoSymbol<CR>

let g:WhichKeyDesc_search_symbol_project = "<leader>sS Symbol Whole Project"
nnoremap <leader>sS :action GotoSymbol<CR>

" ------------- Favorites -------------
" Not using on intellij

" ------------- Project Manager -------------
" Not using on intellij

" ------------- Text -------------
let g:WhichKeyDesc_text_opts = "<leader>t +Text"

let g:WhichKeyDesc_text_duplicate_line = "<leader>td Duplicate Line"
nnoremap <leader>td :action EditorDuplicate<CR>
vnoremap <leader>td :action EditorDuplicate<CR>

let g:WhichKeyDesc_text_format_region = "<leader>tf Format Region"
nnoremap <leader>tf :action ReformatCode<CR>
vnoremap <leader>tf :action ReformatCode<CR>

let g:WhichKeyDesc_text_organize_imports = "<leader>ti Organize Imports"
nnoremap <leader>ti :action OptimizeImports<CR>
vnoremap <leader>ti :action OptimizeImports<CR>

let g:WhichKeyDesc_text_comment_line = "<leader>tk Comment Line"
nnoremap <leader>tk :action CommentByLineComment<CR>
vnoremap <leader>tk :action CommentByLineComment<CR>

let g:WhichKeyDesc_text_replace = "<leader>tr Replace"
nnoremap <leader>tr :action Replace<CR>
vnoremap <leader>tr :action Replace<CR>

let g:WhichKeyDesc_text_sort_lines_ascending = "<leader>ts Sort Lines Ascending"
nnoremap <leader>ts :action EditorSortLines<CR>
vnoremap <leader>ts :action EditorSortLines<CR>

"  let g:WhichKeyDesc_text_sort_lines_descending = "<leader>tS Sort Lines Descending"
"  nnoremap <leader>ts :action ??<CR>
"  vnoremap <leader>ts :action ??<CR>

" ------------- Text Fold -------------
let g:WhichKeyDesc_text_fold_opts = "<leader>tf +Fold"

let g:WhichKeyDesc_text_fold_all = "<leader>tfa Fold All"
nnoremap <leader>tfa :action CollapseAllRegions<CR>
vnoremap <leader>tfa :action CollapseAllRegions<CR>

let g:WhichKeyDesc_text_fold_toggle = "<leader>tfh Fold Toggle"
nnoremap <leader>tfa :action ExpandCollapseToggleAction<CR>
vnoremap <leader>tfa :action ExpandCollapseToggleAction<CR>

let g:WhichKeyDesc_text_unfold_all = "<leader>tfu Unfold All"
nnoremap <leader>tfa :action ExpandAllRegions<CR>
vnoremap <leader>tfa :action ExpandAllRegions<CR>

" ------------- View -------------
let g:WhichKeyDesc_view_opts = "<leader>v +View"

let g:WhichKeyDesc_view_error_list = "<leader>vE Errors List"
nnoremap <leader>vE ActivateProblemsViewToolWindow<CR>

let g:WhichKeyDesc_view_explorer = "<leader>ve Explorer"
nnoremap <leader>ve :NERDTreeToggle<CR>

let g:WhichKeyDesc_view_marks = "<leader>vm Marks"
nnoremap <leader>vm ActivateBookmarksToolWindow<CR>

"  let g:WhichKeyDesc_view_pm = "<leader>vp Projects Manager"
"  nnoremap <leader>vp ??<CR>

let g:WhichKeyDesc_view_expand_selection = "<leader>vv Expand Selection"
nnoremap <leader>vv EditorSelectWord<CR>
vnoremap <leader>vv EditorSelectWord<CR>

" ------------- View Toggle -------------
let g:WhichKeyDesc_view_toggle_opts = "<leader>vt +Toggle"

let g:WhichKeyDesc_view_activity_bar = "<leader>vta Activity Bar"
nnoremap <leader>vta HideAllWindows<CR>

"  let g:WhichKeyDesc_view_error_lens = "<leader>vte Error Lens"
"  nnoremap <leader>vte ??<CR>

let g:WhichKeyDesc_view_side_bar = "<leader>vts Side Bar"
nnoremap <leader>vte HideAllWindows<CR>

let g:WhichKeyDesc_view_zen_mode = "<leader>vtz Zen Mode"
nnoremap <leader>vtz ToggleDistractionFreeMode<CR>